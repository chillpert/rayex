#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shader_clock : enable

#include "Random.glsl"
#include "Ray.glsl"

layout( location = 0 ) rayPayloadEXT RayPayLoad ray;

layout( binding = 0, set = 0 ) uniform accelerationStructureEXT topLevelAS;
layout( binding = 1, set = 0, rgba32f ) uniform image2D image;

layout( binding = 0, set = 1 ) uniform CameraProperties
{
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
  vec4 cameraPos;

  vec4 padding0;
  vec4 padding1;
  vec4 padding2;
}
cam;

layout( push_constant ) uniform Constants
{
  vec4 clearColor;
  uint frameCount;
  uint sampleRatePerPixel;
  uint maxRecursionDepth;
  bool useEnvironmentMap;

  uint padding0;
  uint padding1;
  uint padding2;
  uint padding3;
};

void main( )
{
  uint seed      = tea( gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int( clockARB( ) ) );
  vec3 hitValues = vec3( 0.0F );

  for ( uint i = 0; i < sampleRatePerPixel; ++i )
  {
    ray.seed = tea( gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int( clockARB( ) ) );

    vec2 positionWithinPixel = vec2( gl_LaunchIDEXT.xy ) + vec2( rnd( seed ), rnd( seed ) );
    const vec2 inUV          = positionWithinPixel / vec2( gl_LaunchSizeEXT.xy );
    vec2 d                   = inUV * 2.0F - 1.0F;

    vec4 origin    = cam.viewInverse * vec4( 0.0F, 0.0F, 0.0F, 1.0F );
    vec4 target    = cam.projInverse * vec4( d.x, d.y, 1.0F, 1.0F );
    vec4 direction = cam.viewInverse * vec4( normalize( target.xyz ), 0.0F );

    ray.rayDirection = direction.xyz;
    ray.rayOrigin    = origin.xyz;
    ray.weight       = vec3( 0.0F );

    vec3 weight   = vec3( 1.0F );
    vec3 hitValue = vec3( 0.0F );

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin    = 0.001;
    float tMax    = 10000.0;

    for ( ray.depth = 0; ray.depth < maxRecursionDepth; ray.depth++ )
    {
      traceRayEXT( topLevelAS,       // acceleration structure
                   rayFlags,         // rayFlags
                   0xFF,             // cullMask
                   0,                // sbtRecordOffset
                   0,                // sbtRecordStride
                   0,                // missIndex
                   ray.rayOrigin,    // ray origin
                   tMin,             // ray min range
                   ray.rayDirection, // ray direction
                   tMax,             // ray max range
                   0 );              // payload (location = 0)

      hitValue += ray.hitValue * weight;
      weight *= ray.weight;
    }

    hitValues += hitValue;
  }

  ray.hitValue = hitValues / sampleRatePerPixel;

  // Do accumulation over time
  vec4 finalColor;
  if ( frameCount > 0 )
  {
    vec3 oldColor = imageLoad( image, ivec2( gl_LaunchIDEXT.xy ) ).xyz;
    // Linearly interpolate between old and latest color.
    finalColor = vec4( mix( oldColor, ray.hitValue, 1.0F / float( frameCount + 1 ) ), 1.0F );
    imageStore( image, ivec2( gl_LaunchIDEXT.xy ), finalColor );
  }
  else
  {
    // First frame, replace the value in the buffer
    finalColor = vec4( ray.hitValue, 1.0f );
    imageStore( image, ivec2( gl_LaunchIDEXT.xy ), finalColor );
  }
}
