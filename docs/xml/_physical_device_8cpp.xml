<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="_physical_device_8cpp" kind="file" language="C++">
    <compoundname>PhysicalDevice.cpp</compoundname>
    <includes refid="_physical_device_8hpp" local="yes">PhysicalDevice.hpp</includes>
    <includes refid="_components_8hpp" local="yes">Components.hpp</includes>
    <includes refid="_queues_8hpp" local="yes">Queues.hpp</includes>
    <incdepgraph>
      <node id="19">
        <label>iomanip</label>
      </node>
      <node id="12">
        <label>glm/ext/matrix_transform.hpp</label>
      </node>
      <node id="34">
        <label>WindowBase.hpp</label>
        <link refid="_window_base_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>imgui_impl_sdl.h</label>
      </node>
      <node id="20">
        <label>cstdint</label>
      </node>
      <node id="25">
        <label>stdexcept</label>
      </node>
      <node id="17">
        <label>imgui_impl_vulkan.h</label>
      </node>
      <node id="36">
        <label>Queues.hpp</label>
        <link refid="_queues_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>map</label>
      </node>
      <node id="32">
        <label>unordered_set</label>
      </node>
      <node id="28">
        <label>fstream</label>
      </node>
      <node id="14">
        <label>glm/gtx/string_cast.hpp</label>
      </node>
      <node id="2">
        <label>PhysicalDevice.hpp</label>
        <link refid="_physical_device_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pch/stdafx.hpp</label>
        <link refid="stdafx_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="4">
        <label>Core.hpp</label>
        <link refid="_core_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>optional</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="35">
        <label>CameraBase.hpp</label>
        <link refid="_camera_base_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>array</label>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>C:/Repos/renderer/src/api/devices/PhysicalDevice.cpp</label>
        <link refid="_physical_device_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>cstdlib</label>
      </node>
      <node id="15">
        <label>imgui.h</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="31">
        <label>unordered_map</label>
      </node>
      <node id="33">
        <label>Components.hpp</label>
        <link refid="_components_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>glm/ext/matrix_clip_space.hpp</label>
      </node>
      <node id="9">
        <label>Time.hpp</label>
        <link refid="_time_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>set</label>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>cstring</label>
      </node>
      <node id="7">
        <label>vulkan/vulkan.hpp</label>
      </node>
      <node id="30">
        <label>memory</label>
      </node>
      <node id="6">
        <label>SDL2/SDL_vulkan.h</label>
      </node>
      <node id="11">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacerx">rx</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_physical_device_8hpp" kindref="compound">PhysicalDevice.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_components_8hpp" kindref="compound">Components.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_queues_8hpp" kindref="compound">Queues.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerx" kindref="compound">rx</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_physical_device_1a849b1ffaa9fe125d5fc299e8a6e328c6" kindref="member">PhysicalDevice::init</ref>(<sp/>)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>physicalDevices<sp/>=<sp/><ref refid="namespacerx_1a2a6631357a4950ac30f9491c53b249f2" kindref="member">g_instance</ref>.enumeratePhysicalDevices(<sp/>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;unsigned<sp/>int,<sp/>std::string&gt;&gt;<sp/>results;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>physicalDevices<sp/>)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>evaluate(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp.first<sp/>&gt;<sp/>score<sp/>)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_physicalDevice<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>temp.first;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;===================================================================&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_physicalDevice<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_core_8hpp_1a4491fbcb10b8b7825807ac930e072513" kindref="member">RX_ERROR</ref>(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>suitable<sp/>device<sp/>was<sp/>found&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Physical<sp/>device<sp/>report:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>separator<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>name&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Score&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>separator<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>result<sp/>:<sp/>results<sp/>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(<sp/>32<sp/>)<sp/>&lt;&lt;<sp/>std::setfill(<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/>result.second<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(<sp/>32<sp/>)<sp/>&lt;&lt;<sp/>std::setfill(<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/>result.first;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>information<sp/>about<sp/>the<sp/>GPU<sp/>that<sp/>was<sp/>selected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>properties<sp/>=<sp/>m_physicalDevice.getProperties(<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_core_8hpp_1a5558c08f63fa592cd440b1012d0f8097" kindref="member">RX_LOG</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Selected<sp/>GPU:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>properties.deviceName<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerx_1a7a45dde822191d473bf2d48b4f1989d6" kindref="member">g_physicalDeviceLimits</ref><sp/>=<sp/>properties.limits;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerx_1a3bba8e931280440c523b5e01abca7a66" kindref="member">g_physicalDevice</ref><sp/>=<sp/>m_physicalDevice;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::pair&lt;unsigned<sp/>int,<sp/>std::string&gt;<sp/>PhysicalDevice::evaluate(<sp/>vk::PhysicalDevice<sp/>physicalDevice<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>score<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>device&apos;s<sp/>features<sp/>and<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>props<sp/>=<sp/>physicalDevice.getProperties(<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>feats<sp/>=<sp/>physicalDevice.getFeatures(<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rayTracingFeats<sp/>=<sp/><ref refid="namespacerx_1aeedd24898d685be90044cb18f760dc11" kindref="member">getRayTracingFeatures</ref>(<sp/>physicalDevice<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>deviceName<sp/>=<sp/>props.deviceName;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rayTracingFeats.rayTracing<sp/>==<sp/>VK_FALSE<sp/>||<sp/>rayTracingFeats.rayQuery<sp/>==<sp/>VK_FALSE<sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>0u,<sp/>deviceName<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>props.deviceType<sp/>==<sp/>vk::PhysicalDeviceType::eDiscreteGpu<sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>100u;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>0u,<sp/>deviceName<sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>VK_API_VERSION_1_1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>props.apiVersion<sp/>&gt;=<sp/>VK_API_VERSION_1_1<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>10u;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>VK_API_VERSION_1_2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>props.apiVersion<sp/>&gt;=<sp/>VK_API_VERSION_1_2<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>10u;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>deviceName.find(<sp/></highlight><highlight class="stringliteral">&quot;RTX&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>std::string::npos<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>100u;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classrx_1_1_queues_1a6de73934bd1ec9973de8caddfe897077" kindref="member">Queues::isComplete</ref>(<sp/>physicalDevice<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>100u;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>0u,<sp/>deviceName<sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classrx_1_1_queues_1aa0e1ad87d64b7edadf67af40f98d30ce" kindref="member">Queues::hasDedicatedTransferQueueFamily</ref>(<sp/>physicalDevice<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>25;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>more<sp/>hardware<sp/>specific<sp/>evaulation<sp/>(those<sp/>that<sp/>are<sp/>benefitial<sp/>for<sp/>path<sp/>tracing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>score,<sp/>deviceName<sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vk::PhysicalDeviceRayTracingFeaturesKHR<sp/><ref refid="namespacerx_1aeedd24898d685be90044cb18f760dc11" kindref="member">getRayTracingFeatures</ref>(<sp/>vk::PhysicalDevice<sp/>physicalDevice<sp/>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>vk::PhysicalDeviceRayTracingFeaturesKHR<sp/>rayTracingFeatures;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>vk::PhysicalDeviceFeatures2<sp/>features2;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>features2.setPNext(<sp/>&amp;rayTracingFeatures<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>physicalDevice.getFeatures2(<sp/>&amp;features2<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rayTracingFeatures;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Repos/renderer/src/api/devices/PhysicalDevice.cpp"/>
  </compounddef>
</doxygen>
