<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="_swapchain_8cpp" kind="file" language="C++">
    <compoundname>Swapchain.cpp</compoundname>
    <includes refid="_swapchain_8hpp" local="yes">Swapchain.hpp</includes>
    <includes refid="_components_8hpp" local="yes">Components.hpp</includes>
    <includes refid="_initializers_8hpp" local="yes">Initializers.hpp</includes>
    <incdepgraph>
      <node id="43">
        <label>glm/gtx/hash.hpp</label>
      </node>
      <node id="41">
        <label>Texture.hpp</label>
        <link refid="_texture_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iomanip</label>
      </node>
      <node id="14">
        <label>glm/ext/matrix_transform.hpp</label>
      </node>
      <node id="4">
        <label>WindowBase.hpp</label>
        <link refid="_window_base_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>IndexBuffer.hpp</label>
        <link refid="_index_buffer_8hpp"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Buffer.hpp</label>
        <link refid="_buffer_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>imgui_impl_sdl.h</label>
      </node>
      <node id="22">
        <label>cstdint</label>
      </node>
      <node id="36">
        <label>Image.hpp</label>
        <link refid="_image_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>RenderPass.hpp</label>
        <link refid="_render_pass_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>stdexcept</label>
      </node>
      <node id="19">
        <label>imgui_impl_vulkan.h</label>
      </node>
      <node id="48">
        <label>DescriptorSet.hpp</label>
        <link refid="_descriptor_set_8hpp"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Swapchain.hpp</label>
        <link refid="_swapchain_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>UniformBuffer.hpp</label>
        <link refid="_uniform_buffer_8hpp"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>map</label>
      </node>
      <node id="38">
        <label>AccelerationStructure.hpp</label>
        <link refid="_acceleration_structure_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>unordered_set</label>
      </node>
      <node id="30">
        <label>fstream</label>
      </node>
      <node id="16">
        <label>glm/gtx/string_cast.hpp</label>
      </node>
      <node id="5">
        <label>stdafx.hpp</label>
        <link refid="stdafx_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="1">
        <label>C:/Repos/renderer/src/api/Swapchain.cpp</label>
        <link refid="_swapchain_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Core.hpp</label>
        <link refid="_core_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>optional</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="40">
        <label>Model.hpp</label>
        <link refid="_model_8hpp"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>CameraBase.hpp</label>
        <link refid="_camera_base_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>array</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="49">
        <label>DescriptorSetLayout.hpp</label>
        <link refid="_descriptor_set_layout_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>VertexBuffer.hpp</label>
        <link refid="_vertex_buffer_8hpp"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cstdlib</label>
      </node>
      <node id="42">
        <label>Vertex.hpp</label>
        <link refid="_vertex_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>imgui.h</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="33">
        <label>unordered_map</label>
      </node>
      <node id="39">
        <label>Components.hpp</label>
        <link refid="_components_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>glm/ext/matrix_clip_space.hpp</label>
      </node>
      <node id="37">
        <label>Helpers.hpp</label>
        <link refid="_helpers_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Time.hpp</label>
        <link refid="_time_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="24">
        <label>cstring</label>
      </node>
      <node id="51">
        <label>Initializers.hpp</label>
        <link refid="_initializers_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vulkan/vulkan.hpp</label>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
      <node id="8">
        <label>SDL2/SDL_vulkan.h</label>
      </node>
      <node id="3">
        <label>Surface.hpp</label>
        <link refid="_surface_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacerx">rx</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_swapchain_8hpp" kindref="compound">Swapchain.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_components_8hpp" kindref="compound">Components.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_initializers_8hpp" kindref="compound">Initializers.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerx" kindref="compound">rx</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><ref refid="classrx_1_1_swapchain_1a7c63bb007e1f5a8cb3b80d793c015850" kindref="member">Swapchain::Swapchain</ref>(<sp/>Surface*<sp/>surface,<sp/>vk::RenderPass<sp/>renderPass,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialize<sp/>)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>initialize<sp/>)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrx_1_1_swapchain_1a7958b9074212f1a4ef9e81c59cf3bc9a" kindref="member">init</ref>(<sp/>surface,<sp/>renderPass<sp/>);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_swapchain_1a7958b9074212f1a4ef9e81c59cf3bc9a" kindref="member">Swapchain::init</ref>(<sp/>Surface*<sp/>surface,<sp/>vk::RenderPass<sp/>renderPass<sp/>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;checkSettingSupport(<sp/>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surfaceCapabilities<sp/>=<sp/>surface-&gt;getCapabilities(<sp/>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>vk::SwapchainCreateInfoKHR<sp/>createInfo;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.surface<sp/>=<sp/><ref refid="namespacerx_1a2e6be14fb5dfecb4f55aaabb40320b90" kindref="member">g_surface</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>another<sp/>image<sp/>so<sp/>that<sp/>the<sp/>application<sp/>does<sp/>not<sp/>have<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>driver<sp/>before<sp/>another<sp/>image<sp/>can<sp/>be<sp/>acquired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>minImageCount<sp/>=<sp/>surfaceCapabilities.minImageCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.maxImageCount<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_core_8hpp_1a4491fbcb10b8b7825807ac930e072513" kindref="member">RX_ERROR</ref>(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>surface<sp/>does<sp/>not<sp/>support<sp/>any<sp/>images<sp/>for<sp/>a<sp/>swap<sp/>chain.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>preferred<sp/>image<sp/>count<sp/>is<sp/>exceeding<sp/>the<sp/>supported<sp/>amount<sp/>then<sp/>use<sp/>the<sp/>maximum<sp/>amount<sp/>of<sp/>images<sp/>supported<sp/>by<sp/>the<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>minImageCount<sp/>&gt;<sp/>surfaceCapabilities.maxImageCount<sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minImageCount<sp/>=<sp/>surfaceCapabilities.maxImageCount;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.minImageCount<sp/>=<sp/>minImageCount;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageFormat<sp/>=<sp/>surface-&gt;getFormat(<sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageColorSpace<sp/>=<sp/>surface-&gt;getColorSpace(<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.preTransform<sp/>=<sp/>surfaceCapabilities.currentTransform;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prefer<sp/>opaque<sp/>bit<sp/>over<sp/>any<sp/>other<sp/>composite<sp/>alpha<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.compositeAlpha<sp/>=</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>surfaceCapabilities.supportedCompositeAlpha<sp/>&amp;<sp/>vk::CompositeAlphaFlagBitsKHR::eOpaque<sp/>?<sp/>vk::CompositeAlphaFlagBitsKHR::eOpaque<sp/>:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>surfaceCapabilities.supportedCompositeAlpha<sp/>&amp;<sp/>vk::CompositeAlphaFlagBitsKHR::ePreMultiplied<sp/>?<sp/>vk::CompositeAlphaFlagBitsKHR::ePreMultiplied<sp/>:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>surfaceCapabilities.supportedCompositeAlpha<sp/>&amp;<sp/>vk::CompositeAlphaFlagBitsKHR::ePostMultiplied<sp/>?<sp/>vk::CompositeAlphaFlagBitsKHR::ePostMultiplied<sp/>:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vk::CompositeAlphaFlagBitsKHR::eInherit;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>swap<sp/>chain<sp/>image<sp/>extent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.currentExtent.width<sp/>!=<sp/>UINT32_MAX<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>surface<sp/>size<sp/>will<sp/>be<sp/>determined<sp/>by<sp/>the<sp/>extent<sp/>of<sp/>a<sp/>swapchain<sp/>targeting<sp/>the<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_extent<sp/>=<sp/>surfaceCapabilities.currentExtent;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>width<sp/>and<sp/>height.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_extent<sp/>=<sp/><ref refid="namespacerx_1a125bfd0bedca67d2df1c1cc90d63df48" kindref="member">g_window</ref>-&gt;getExtent(<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>width_t<sp/>=<sp/>m_extent.width;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.maxImageExtent.width<sp/>&lt;<sp/>m_extent.width<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width_t<sp/>=<sp/>surfaceCapabilities.maxImageExtent.width;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>height_t<sp/>=<sp/>m_extent.height;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.maxImageExtent.height<sp/>&lt;<sp/>m_extent.height<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height_t<sp/>=<sp/>surfaceCapabilities.maxImageExtent.height;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_extent.width<sp/>=<sp/>width_t;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.minImageExtent.width<sp/>&gt;<sp/>width_t<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_extent.width<sp/>=<sp/>surfaceCapabilities.minImageExtent.width;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_extent.height<sp/>=<sp/>height_t;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.minImageExtent.height<sp/>&gt;<sp/>height_t<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_extent.height<sp/>=<sp/>surfaceCapabilities.minImageExtent.height;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageExtent<sp/>=<sp/>m_extent;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surfaceCapabilities.maxImageArrayLayers<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_core_8hpp_1a4491fbcb10b8b7825807ac930e072513" kindref="member">RX_ERROR</ref>(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>surface<sp/>does<sp/>not<sp/>support<sp/>a<sp/>single<sp/>array<sp/>layer.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageArrayLayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageUsage<sp/>=<sp/>vk::ImageUsageFlagBits::eColorAttachment<sp/>|<sp/>vk::ImageUsageFlagBits::eTransferDst;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>queueFamilyIndices<sp/>=<sp/>{<sp/><ref refid="namespacerx_1a293d2cff449b4f7a9a818139ac804c24" kindref="member">g_graphicsFamilyIndex</ref><sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>queueFamilyIndices.size(<sp/>)<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/>=<sp/>vk::SharingMode::eConcurrent;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>queueFamilyIndices.size(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/>=<sp/>queueFamilyIndices.data(<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/>=<sp/>vk::SharingMode::eExclusive;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.presentMode<sp/>=<sp/>surface-&gt;getPresentMode(<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapchain<sp/>=<sp/><ref refid="namespacerx_1af79af13d89e6750c84e1abba095f111d" kindref="member">g_device</ref>.createSwapchainKHRUnique(<sp/>createInfo<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_swapchain<sp/>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_core_8hpp_1a4491fbcb10b8b7825807ac930e072513" kindref="member">RX_ERROR</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>swapchain.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerx_1a25f4cf185df34819bc1126b3b67eb3c7" kindref="member">g_swapchain</ref><sp/>=<sp/>m_swapchain.get(<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>initImages(<sp/>minImageCount,<sp/>surface-&gt;getFormat(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>initDepthImage(<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>initFramebuffers(<sp/>renderPass<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_swapchain_1ab79b0f2b958a8f6073c5c15290f450af" kindref="member">Swapchain::destroy</ref>(<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_swapchain<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacerx_1af79af13d89e6750c84e1abba095f111d" kindref="member">g_device</ref>.destroySwapchainKHR(<sp/>m_swapchain.get(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_swapchain.get(<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_swapchain_1a32989d45e2a0530e3c2b6d346ae62315" kindref="member">Swapchain::setImageAspect</ref>(<sp/>vk::ImageAspectFlags<sp/>flags<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>m_imageAspect<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_swapchain_1a7bf61cb448d0b0497ecd8fe33cbe5b44" kindref="member">Swapchain::setImageLayout</ref>(<sp/>vk::ImageLayout<sp/>oldLayout,<sp/>vk::ImageLayout<sp/>newLayout<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>image<sp/>:<sp/>m_images<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevk_1_1_helper_1a6e1227990cef167f6d5b6b7b1f1b52b2" kindref="member">vk::Helper::transitionImageLayout</ref>(<sp/>image,<sp/>oldLayout,<sp/>newLayout<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_swapchain_1ac55c393f41d950b2a857566325c8452e" kindref="member">Swapchain::acquireNextImage</ref>(<sp/>vk::Semaphore<sp/>semaphore,<sp/>vk::Fence<sp/>fence<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerx_1af79af13d89e6750c84e1abba095f111d" kindref="member">g_device</ref>.acquireNextImageKHR(<sp/>m_swapchain.get(<sp/>),<sp/>UINT64_MAX,<sp/>semaphore,<sp/>fence,<sp/>&amp;m_currentImageIndex<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swapchain::initImages(<sp/>uint32_t<sp/>minImageCount,<sp/>vk::Format<sp/>surfaceFormat<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>actual<sp/>swapchain<sp/>images.<sp/>This<sp/>sets<sp/>them<sp/>up<sp/>automatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>m_images<sp/>=<sp/><ref refid="namespacerx_1af79af13d89e6750c84e1abba095f111d" kindref="member">g_device</ref>.getSwapchainImagesKHR(<sp/>m_swapchain.get(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_core_8hpp_1a5a0923c9f3d668bc224b810b8baf099f" kindref="member">RX_ASSERT</ref>(<sp/>m_images.size(<sp/>)<sp/>&gt;=<sp/>minImageCount,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>swapchain<sp/>images.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerx_1a19647ba4f4e9b78d73b93a3fc417d16e" kindref="member">g_swapchainImageCount</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_images.size(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>image<sp/>views<sp/>for<sp/>swapchain<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>m_imageViews.resize(<sp/>m_images.size(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_imageViews.size(<sp/>);<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_imageViews[i]<sp/>=<sp/><ref refid="namespacevk_1_1_initializer_1a962e46155dc58c46245cc58a65ececbf" kindref="member">vk::Initializer::createImageViewUnique</ref>(<sp/>m_images[i],<sp/>surfaceFormat,<sp/>m_imageAspect<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swapchain::initDepthImage(<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Depth<sp/>image<sp/>for<sp/>depth<sp/>buffering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>vk::Format<sp/>depthFormat<sp/>=<sp/><ref refid="namespacerx_1a06fa9d1a8abc68b8578eece02ebcd66f" kindref="member">getSupportedDepthFormat</ref>(<sp/><ref refid="namespacerx_1a3bba8e931280440c523b5e01abca7a66" kindref="member">g_physicalDevice</ref><sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imageCreateInfo<sp/>=<sp/><ref refid="namespacevk_1_1_helper_1ae70d424ee5be2cabae1c63df035ca24a" kindref="member">vk::Helper::getImageCreateInfo</ref>(<sp/>vk::Extent3D(<sp/>m_extent.width,<sp/>m_extent.height,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>imageCreateInfo.format<sp/>=<sp/>depthFormat;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>imageCreateInfo.usage<sp/>=<sp/>vk::ImageUsageFlagBits::eDepthStencilAttachment;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>m_depthImage.<ref refid="classrx_1_1_image_1aa7617f3f05ffcf09c3ab29cbdfaeb1ac" kindref="member">init</ref>(<sp/>imageCreateInfo<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Image<sp/>view<sp/>for<sp/>depth<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>m_depthImageView<sp/>=<sp/><ref refid="namespacevk_1_1_initializer_1a962e46155dc58c46245cc58a65ececbf" kindref="member">vk::Initializer::createImageViewUnique</ref>(<sp/>m_depthImage.<ref refid="classrx_1_1_image_1ad9aabba321dd549113e214c6fc39cc9c" kindref="member">get</ref>(<sp/>),<sp/>depthFormat,<sp/>vk::ImageAspectFlagBits::eDepth<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swapchain::initFramebuffers(<sp/>vk::RenderPass<sp/>renderPass<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>m_framebuffers.resize(<sp/>m_imageViews.size(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_framebuffers.size(<sp/>);<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_framebuffers[i]<sp/>=<sp/><ref refid="namespacevk_1_1_initializer_1a27157ac87ba69ecc219184443b7279f3" kindref="member">vk::Initializer::createFramebufferUnique</ref>(<sp/>{<sp/>m_imageViews[i].get(<sp/>),<sp/>m_depthImageView.get(<sp/>)<sp/>},<sp/>renderPass,<sp/>m_extent<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>vk::Format<sp/><ref refid="namespacerx_1a06fa9d1a8abc68b8578eece02ebcd66f" kindref="member">getSupportedDepthFormat</ref>(<sp/>vk::PhysicalDevice<sp/>physicalDevice<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;vk::Format&gt;<sp/>candidates<sp/>{<sp/>vk::Format::eD32Sfloat,<sp/>vk::Format::eD32SfloatS8Uint,<sp/>vk::Format::eD24UnormS8Uint<sp/>};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrx_1_1_image_1a35aaa7533122b9dc4a59deefcb49eb6e" kindref="member">Image::findSupportedFormat</ref>(<sp/>physicalDevice,<sp/>candidates,<sp/>vk::FormatFeatureFlagBits::eDepthStencilAttachment,<sp/>vk::ImageTiling::eOptimal<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Repos/renderer/src/api/Swapchain.cpp"/>
  </compounddef>
</doxygen>
