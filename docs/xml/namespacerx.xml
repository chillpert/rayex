<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespacerx" kind="namespace" language="C++">
    <compoundname>rx</compoundname>
    <innerclass refid="structrx_1_1_acceleration_structure" prot="public">rx::AccelerationStructure</innerclass>
    <innerclass refid="classrx_1_1_api" prot="public">rx::Api</innerclass>
    <innerclass refid="structrx_1_1_blas" prot="public">rx::Blas</innerclass>
    <innerclass refid="structrx_1_1_blas_instance" prot="public">rx::BlasInstance</innerclass>
    <innerclass refid="classrx_1_1_buffer" prot="public">rx::Buffer</innerclass>
    <innerclass refid="classrx_1_1_camera_base" prot="public">rx::CameraBase</innerclass>
    <innerclass refid="structrx_1_1_camera_ubo" prot="public">rx::CameraUbo</innerclass>
    <innerclass refid="classrx_1_1_command_buffer" prot="public">rx::CommandBuffer</innerclass>
    <innerclass refid="classrx_1_1_debug_messenger" prot="public">rx::DebugMessenger</innerclass>
    <innerclass refid="classrx_1_1_descriptor_set" prot="public">rx::DescriptorSet</innerclass>
    <innerclass refid="classrx_1_1_descriptor_set_layout" prot="public">rx::DescriptorSetLayout</innerclass>
    <innerclass refid="classrx_1_1_device" prot="public">rx::Device</innerclass>
    <innerclass refid="classrx_1_1_directional_light_node" prot="public">rx::DirectionalLightNode</innerclass>
    <innerclass refid="classrx_1_1_geometry_node" prot="public">rx::GeometryNode</innerclass>
    <innerclass refid="classrx_1_1_gui_base" prot="public">rx::GuiBase</innerclass>
    <innerclass refid="classrx_1_1_image" prot="public">rx::Image</innerclass>
    <innerclass refid="classrx_1_1_index_buffer" prot="public">rx::IndexBuffer</innerclass>
    <innerclass refid="classrx_1_1_instance" prot="public">rx::Instance</innerclass>
    <innerclass refid="classrx_1_1_light_node" prot="public">rx::LightNode</innerclass>
    <innerclass refid="classrx_1_1_material" prot="public">rx::Material</innerclass>
    <innerclass refid="classrx_1_1_model" prot="public">rx::Model</innerclass>
    <innerclass refid="structrx_1_1_mvp_ubo" prot="public">rx::MvpUbo</innerclass>
    <innerclass refid="classrx_1_1_node" prot="public">rx::Node</innerclass>
    <innerclass refid="classrx_1_1_physical_device" prot="public">rx::PhysicalDevice</innerclass>
    <innerclass refid="classrx_1_1_pipeline" prot="public">rx::Pipeline</innerclass>
    <innerclass refid="classrx_1_1_queues" prot="public">rx::Queues</innerclass>
    <innerclass refid="classrx_1_1_ray_tracing_builder" prot="public">rx::RayTracingBuilder</innerclass>
    <innerclass refid="structrx_1_1_ray_tracing_instance" prot="public">rx::RayTracingInstance</innerclass>
    <innerclass refid="classrx_1_1_renderer" prot="public">rx::Renderer</innerclass>
    <innerclass refid="classrx_1_1_render_pass" prot="public">rx::RenderPass</innerclass>
    <innerclass refid="classrx_1_1_settings" prot="public">rx::Settings</innerclass>
    <innerclass refid="classrx_1_1_surface" prot="public">rx::Surface</innerclass>
    <innerclass refid="classrx_1_1_swapchain" prot="public">rx::Swapchain</innerclass>
    <innerclass refid="classrx_1_1_texture" prot="public">rx::Texture</innerclass>
    <innerclass refid="classrx_1_1_time" prot="public">rx::Time</innerclass>
    <innerclass refid="structrx_1_1_tlas" prot="public">rx::Tlas</innerclass>
    <innerclass refid="classrx_1_1_transform_node" prot="public">rx::TransformNode</innerclass>
    <innerclass refid="classrx_1_1_uniform_buffer" prot="public">rx::UniformBuffer</innerclass>
    <innerclass refid="structrx_1_1_vertex" prot="public">rx::Vertex</innerclass>
    <innerclass refid="classrx_1_1_vertex_buffer" prot="public">rx::VertexBuffer</innerclass>
    <innerclass refid="classrx_1_1_window_base" prot="public">rx::WindowBase</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacerx_1a108d586192564f598fd82c8c2483fe8a" prot="public" static="no" strong="no">
        <type></type>
        <name>WindowFlags</name>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aa23c63438aa90b514e7fd7269e3cbe8c1" prot="public">
          <name>WINDOW_FULLSCREEN</name>
          <initializer>= 0x00000001</initializer>
          <briefdescription>
<para>The window is in window-fullscreen. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aac1f47c62b26aaccab91f7992203fa749" prot="public">
          <name>WINDOW_BORDERLESS</name>
          <initializer>= 0x00000010</initializer>
          <briefdescription>
<para>Removes the window decoration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aa7b53bf1790791de422a956078f4b984f" prot="public">
          <name>WINDOW_RESIZABLE</name>
          <initializer>= 0x00000020</initializer>
          <briefdescription>
<para>The window can be resized. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aa5871005b1eb363e9d3a6e81693ff937a" prot="public">
          <name>WINDOW_MINIMIZED</name>
          <initializer>= 0x00000040</initializer>
          <briefdescription>
<para>The window is minimized. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aab732e14e32851942bec0a00fa569bda4" prot="public">
          <name>WINDOW_MAXIMIZED</name>
          <initializer>= 0x00000080</initializer>
          <briefdescription>
<para>The window is maximized. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aafb910e9581cc84fcc2e9556e7b831274" prot="public">
          <name>WINDOW_INPUT_FOCUS</name>
          <initializer>= 0x00000200</initializer>
          <briefdescription>
<para>The window has input focus. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aa4cc4779f4e8f8e4fd358efd74a08c487" prot="public">
          <name>WINDOW_MOUSE_FOCUS</name>
          <initializer>= 0x00000400</initializer>
          <briefdescription>
<para>The window has mouse focus. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aa60c681c47546888248a80d2e3561840a" prot="public">
          <name>WINDOW_FULLSCREEN_DESKTOP</name>
          <initializer>= ( WINDOW_FULLSCREEN | 0x00001000 )</initializer>
          <briefdescription>
<para>The window is in fullscreen. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerx_1a108d586192564f598fd82c8c2483fe8aa8a2df8295d56b3dd6968b0ab57eb2ef0" prot="public">
          <name>WINDOW_MOUSE_CAPTURE</name>
          <initializer>= 0x00004000</initializer>
          <briefdescription>
<para>Mouse can not leave the window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags for the window creation. </para>
        </briefdescription>
        <detaileddescription>
<para>Acts like a wrapper for SDL_WindowFlags to only expose the most important ones. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/window/WindowBase.hpp" line="13" column="3" bodyfile="C:/Repos/renderer/src/window/WindowBase.hpp" bodystart="14" bodyend="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacerx_1a9d44a35c45d12184bce248ddb7e68097" prot="public" static="no">
        <type>enum <ref refid="namespacerx_1a108d586192564f598fd82c8c2483fe8a" kindref="member">rx::WindowFlags</ref></type>
        <definition>typedef enum rx::WindowFlags rx::WindowFlags</definition>
        <argsstring></argsstring>
        <name>WindowFlags</name>
        <briefdescription>
<para>Flags for the window creation. </para>
        </briefdescription>
        <detaileddescription>
<para>Acts like a wrapper for SDL_WindowFlags to only expose the most important ones. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/window/WindowBase.hpp" line="24" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerx_1acfb56bba9609d86c6ba574d168328150" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; const char * &gt;</type>
        <definition>const std::vector&lt;const char*&gt; rx::layers</definition>
        <argsstring></argsstring>
        <name>layers</name>
        <initializer>= { &quot;VK_LAYER_KHRONOS_validation&quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Api.cpp" line="10" column="21" bodyfile="C:/Repos/renderer/src/api/Api.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1ae1e6f0cd8aa9c6f10c6ffae2320f267d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; const char * &gt;</type>
        <definition>std::vector&lt;const char*&gt; rx::deviceExtensions</definition>
        <argsstring></argsstring>
        <name>deviceExtensions</name>
        <initializer>=
  {
    VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME,
    VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
    VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
    VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME,
    VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME,
    VK_KHR_MAINTENANCE3_EXTENSION_NAME,
    VK_KHR_RAY_TRACING_EXTENSION_NAME
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Api.cpp" line="17" column="15" bodyfile="C:/Repos/renderer/src/api/Api.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1af5d0cc455cab9794ad7d46a006042f30" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t rx::currentFrame</definition>
        <argsstring></argsstring>
        <name>currentFrame</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Api.cpp" line="28" column="10" bodyfile="C:/Repos/renderer/src/api/Api.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a227f0a65a526b6b4517a557cf1db9c7d" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rx::maxFramesInFlight</definition>
        <argsstring></argsstring>
        <name>maxFramesInFlight</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Api.cpp" line="31" column="16" bodyfile="C:/Repos/renderer/src/api/Api.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a125bfd0bedca67d2df1c1cc90d63df48" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classrx_1_1_window_base" kindref="compound">WindowBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; WindowBase &gt; rx::g_window</definition>
        <argsstring></argsstring>
        <name>g_window</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to the window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="5" column="19" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="5" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="8" declcolumn="26"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a2a6631357a4950ac30f9491c53b249f2" prot="public" static="no" mutable="no">
        <type>vk::Instance</type>
        <definition>vk::Instance rx::g_instance</definition>
        <argsstring></argsstring>
        <name>g_instance</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to the Vulkan instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="6" column="16" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="6" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="9" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a3bba8e931280440c523b5e01abca7a66" prot="public" static="no" mutable="no">
        <type>vk::PhysicalDevice</type>
        <definition>vk::PhysicalDevice rx::g_physicalDevice</definition>
        <argsstring></argsstring>
        <name>g_physicalDevice</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to the Vulkan physical device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="7" column="22" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="7" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="10" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1af79af13d89e6750c84e1abba095f111d" prot="public" static="no" mutable="no">
        <type>vk::Device</type>
        <definition>vk::Device rx::g_device</definition>
        <argsstring></argsstring>
        <name>g_device</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to the Vulkan logical device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="8" column="14" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="8" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="11" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a2e6be14fb5dfecb4f55aaabb40320b90" prot="public" static="no" mutable="no">
        <type>vk::SurfaceKHR</type>
        <definition>vk::SurfaceKHR rx::g_surface</definition>
        <argsstring></argsstring>
        <name>g_surface</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to the Vulkan surface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="9" column="18" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="9" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="12" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a25f4cf185df34819bc1126b3b67eb3c7" prot="public" static="no" mutable="no">
        <type>vk::SwapchainKHR</type>
        <definition>vk::SwapchainKHR rx::g_swapchain</definition>
        <argsstring></argsstring>
        <name>g_swapchain</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to the Vulkan swapchain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="10" column="20" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="10" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="13" declcolumn="27"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a19647ba4f4e9b78d73b93a3fc417d16e" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rx::g_swapchainImageCount</definition>
        <argsstring></argsstring>
        <name>g_swapchainImageCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Global variable to store the Vulkan swapchain&apos;s image count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="11" column="12" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="11" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="14" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a383c91796e541f9c2638655c6795d1a6" prot="public" static="no" mutable="no">
        <type>vk::Format</type>
        <definition>vk::Format rx::g_surfaceFormat</definition>
        <argsstring></argsstring>
        <name>g_surfaceFormat</name>
        <briefdescription>
<para>Global reference to the Vulkan surface&apos;s format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="12" column="14" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="12" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="15" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a061c6006b71019792f3b5c14257fdaa2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vk::UniqueImageView &gt;</type>
        <definition>std::vector&lt; vk::UniqueImageView &gt; rx::g_swapchainImageViews</definition>
        <argsstring></argsstring>
        <name>g_swapchainImageViews</name>
        <briefdescription>
<para>Global reference to the Vulkan swapchain image views. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="13" column="15" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="13" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="16" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a0c0af0cfcc3c14f7f4fe48065581be2d" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rx::g_shaderGroups</definition>
        <argsstring></argsstring>
        <name>g_shaderGroups</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Global variable to store the Vulkan shader groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="14" column="12" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="14" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="17" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a0f9987b483a0e6544bfd6aeb45cb3a12" prot="public" static="no" mutable="no">
        <type>vk::DynamicLoader</type>
        <definition>vk::DynamicLoader rx::g_dynamicLoader</definition>
        <argsstring></argsstring>
        <name>g_dynamicLoader</name>
        <briefdescription>
<para>Global reference to the dynamic loader used to load function pointers provided by extensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="15" column="21" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="15" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="18" declcolumn="28"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1ae0ed4cdd2a322cd9eabbefc9fe1cd789" prot="public" static="no" mutable="no">
        <type>vk::CommandPool</type>
        <definition>vk::CommandPool rx::g_graphicsCmdPool</definition>
        <argsstring></argsstring>
        <name>g_graphicsCmdPool</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to a Vulkan graphics command pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="17" column="19" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="17" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="20" declcolumn="26"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a1ffed93078e1a52f19a95712f718e069" prot="public" static="no" mutable="no">
        <type>vk::CommandPool</type>
        <definition>vk::CommandPool rx::g_transferCmdPool</definition>
        <argsstring></argsstring>
        <name>g_transferCmdPool</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to a Vulkan transfer command pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="18" column="19" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="18" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="21" declcolumn="26"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1af6e9ac110b43e325c90fa487e80cd7cc" prot="public" static="no" mutable="no">
        <type>vk::Queue</type>
        <definition>vk::Queue rx::g_graphicsQueue</definition>
        <argsstring></argsstring>
        <name>g_graphicsQueue</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to a Vulkan graphics queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="19" column="13" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="19" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="22" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a1368884f2e836d2d000898052c5fd912" prot="public" static="no" mutable="no">
        <type>vk::Queue</type>
        <definition>vk::Queue rx::g_transferQueue</definition>
        <argsstring></argsstring>
        <name>g_transferQueue</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Global reference to a Vulkan transfer queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="20" column="13" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="20" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a293d2cff449b4f7a9a818139ac804c24" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rx::g_graphicsFamilyIndex</definition>
        <argsstring></argsstring>
        <name>g_graphicsFamilyIndex</name>
        <briefdescription>
<para>Global variable to store a Vulkan graphics family index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="21" column="12" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="21" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="24" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1aecb50d18eceff6c8d47f3c0f0e0ea006" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rx::g_transferFamilyIndex</definition>
        <argsstring></argsstring>
        <name>g_transferFamilyIndex</name>
        <briefdescription>
<para>Global variable to store a Vulkan transfer family index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="22" column="12" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="22" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="25" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a7a45dde822191d473bf2d48b4f1989d6" prot="public" static="no" mutable="no">
        <type>vk::PhysicalDeviceLimits</type>
        <definition>vk::PhysicalDeviceLimits rx::g_physicalDeviceLimits</definition>
        <argsstring></argsstring>
        <name>g_physicalDeviceLimits</name>
        <briefdescription>
<para>Global variable to store the physical device&apos;s limits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.cpp" line="24" column="28" bodyfile="C:/Repos/renderer/src/api/Components.cpp" bodystart="24" bodyend="-1" declfile="C:/Repos/renderer/src/api/Components.hpp" declline="27" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a945322f9e9dbda3bc24cd824ec62dd5a" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rx::g_maxGeometryNodes</definition>
        <argsstring></argsstring>
        <name>g_maxGeometryNodes</name>
        <initializer>= 2000</initializer>
        <briefdescription>
<para>Global variable to store the maximum amount of geometry nodes supported by the renderer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Vulkan default allocation limit equals 4096 allocations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.hpp" line="30" column="16" bodyfile="C:/Repos/renderer/src/api/Components.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a9eed5b5e2c9146cf4e8b37ebbfdb4540" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rx::g_maxTextures</definition>
        <argsstring></argsstring>
        <name>g_maxTextures</name>
        <initializer>= 2000</initializer>
        <briefdescription>
<para>Global variable to store the maximum amount of textures supported by the renderer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.hpp" line="31" column="16" bodyfile="C:/Repos/renderer/src/api/Components.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a1c65888cb7e011884c3bd61fe7c68d2d" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rx::g_maxLightNodes</definition>
        <argsstring></argsstring>
        <name>g_maxLightNodes</name>
        <initializer>= 25</initializer>
        <briefdescription>
<para>Global variable to store the maximum amount of light sources supported by the renderer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Components.hpp" line="32" column="16" bodyfile="C:/Repos/renderer/src/api/Components.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a24b7e59e5f0c5623374a102107b604cd" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t rx::nodeCounter</definition>
        <argsstring></argsstring>
        <name>nodeCounter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/base/NodeBase.hpp" line="8" column="17" bodyfile="C:/Repos/renderer/src/base/NodeBase.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1af61acd0e23a880c53085d48676f79c16" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int rx::frames</definition>
        <argsstring></argsstring>
        <name>frames</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/window/Time.cpp" line="9" column="7" bodyfile="C:/Repos/renderer/src/window/Time.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a484fb986877121a5dd6790d2db6946cf" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float rx::prevTime</definition>
        <argsstring></argsstring>
        <name>prevTime</name>
        <initializer>= 0.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/window/Time.cpp" line="10" column="9" bodyfile="C:/Repos/renderer/src/window/Time.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerx_1a97f95f78f1329d0d328615ab400e298e" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float rx::timeToWaitForStartingBenchmark</definition>
        <argsstring></argsstring>
        <name>timeToWaitForStartingBenchmark</name>
        <initializer>= 3.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/window/Time.cpp" line="12" column="15" bodyfile="C:/Repos/renderer/src/window/Time.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerx_1aeedd24898d685be90044cb18f760dc11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const vk::PhysicalDeviceRayTracingFeaturesKHR</type>
        <definition>const vk::PhysicalDeviceRayTracingFeaturesKHR rx::getRayTracingFeatures</definition>
        <argsstring>(vk::PhysicalDevice physicalDevice)</argsstring>
        <name>getRayTracingFeatures</name>
        <param>
          <type>vk::PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/devices/PhysicalDevice.cpp" line="94" column="49" bodyfile="C:/Repos/renderer/src/api/devices/PhysicalDevice.cpp" bodystart="94" bodyend="104" declfile="C:/Repos/renderer/src/api/devices/PhysicalDevice.hpp" declline="30" declcolumn="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacerx_1a06fa9d1a8abc68b8578eece02ebcd66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vk::Format</type>
        <definition>vk::Format rx::getSupportedDepthFormat</definition>
        <argsstring>(vk::PhysicalDevice physicalDevice)</argsstring>
        <name>getSupportedDepthFormat</name>
        <param>
          <type>vk::PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/Swapchain.cpp" line="171" column="14" bodyfile="C:/Repos/renderer/src/api/Swapchain.cpp" bodystart="171" bodyend="175" declfile="C:/Repos/renderer/src/api/Swapchain.hpp" declline="57" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacerx_1aa6682c56ae665878e5a20671c4463caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VKAPI_ATTR VkBool32 VKAPI_CALL</type>
        <definition>VKAPI_ATTR VkBool32 VKAPI_CALL rx::debugMessengerCallback</definition>
        <argsstring>(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageType, const VkDebugUtilsMessengerCallbackDataEXT *callbackData, void *userData)</argsstring>
        <name>debugMessengerCallback</name>
        <param>
          <type>VkDebugUtilsMessageSeverityFlagBitsEXT</type>
          <declname>messageSeverity</declname>
        </param>
        <param>
          <type>VkDebugUtilsMessageTypeFlagsEXT</type>
          <declname>messageType</declname>
        </param>
        <param>
          <type>const VkDebugUtilsMessengerCallbackDataEXT *</type>
          <declname>callbackData</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/renderer/src/api/utility/DebugMessenger.cpp" line="45" column="34" bodyfile="C:/Repos/renderer/src/api/utility/DebugMessenger.cpp" bodystart="46" bodyend="107" declfile="C:/Repos/renderer/src/api/utility/DebugMessenger.hpp" declline="28" declcolumn="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The rx namespace encapsulates every single component provided by the renderer. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Repos/renderer/src/api/Api.cpp" line="8" column="1"/>
  </compounddef>
</doxygen>
