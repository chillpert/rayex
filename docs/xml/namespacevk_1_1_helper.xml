<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespacevk_1_1_helper" kind="namespace" language="C++">
    <compoundname>vk::Helper</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevk_1_1_helper_1ad788eee3dfd87ddde000dd9a0023bb7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getPipelineShaderStageCreateInfo</definition>
        <argsstring>(ShaderStageFlagBits stage, ShaderModule module, const char *name=&quot;main&quot;, SpecializationInfo *specializationInfo=nullptr) -&gt; PipelineShaderStageCreateInfo</argsstring>
        <name>getPipelineShaderStageCreateInfo</name>
        <param>
          <type>ShaderStageFlagBits</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>ShaderModule</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;main&quot;</defval>
        </param>
        <param>
          <type>SpecializationInfo *</type>
          <declname>specializationInfo</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Simplifies the process of setting up a pipeline shader stage create info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The target shader stages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>The vulkan shader module. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry function inside the shader file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specializationInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>For specifying constant values at the time the vulkan pipeline is created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the completed pipeline shader stage create info. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="18" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="18" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a0771dfbc2ab126947ed56d5fde2878e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getImageCreateInfo</definition>
        <argsstring>(Extent3D extent) -&gt; ImageCreateInfo</argsstring>
        <name>getImageCreateInfo</name>
        <param>
          <type>Extent3D</type>
          <declname>extent</declname>
        </param>
        <briefdescription>
<para>Simplifies the process of setting up an image create info with the most common settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>extent</parametername>
</parameternamelist>
<parameterdescription>
<para>The image&apos;s extent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the completed image create info. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="23" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a9b8d3e169a2f8c5cd9111d056e325319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getImageViewCreateInfo</definition>
        <argsstring>(Image image, Format format, ImageViewType viewType=ImageViewType::e2D, ImageAspectFlags aspectFlags=ImageAspectFlagBits::eColor) -&gt; ImageViewCreateInfo</argsstring>
        <name>getImageViewCreateInfo</name>
        <param>
          <type>Image</type>
          <declname>image</declname>
        </param>
        <param>
          <type>Format</type>
          <declname>format</declname>
        </param>
        <param>
          <type>ImageViewType</type>
          <declname>viewType</declname>
          <defval>ImageViewType::e2D</defval>
        </param>
        <param>
          <type>ImageAspectFlags</type>
          <declname>aspectFlags</declname>
          <defval>ImageAspectFlagBits::eColor</defval>
        </param>
        <briefdescription>
<para>Simplifies the process of setting up an image view create info with the most common settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The image to init an image view for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The target format of the image view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewType</parametername>
</parameternamelist>
<parameterdescription>
<para>The image&apos;s view type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspectFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>The image&apos;s aspect flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the image view create info. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="31" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1af3313c26337284dc7b0f355139e32f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getSamplerCreateInfo</definition>
        <argsstring>() -&gt; SamplerCreateInfo</argsstring>
        <name>getSamplerCreateInfo</name>
        <briefdescription>
<para>Simplifies the process of setting up a sampler create info for texture usage. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the completed sampler create info. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="35" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a95e71693ea2ee7e6815e5d7015128921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::findMemoryType</definition>
        <argsstring>(PhysicalDevice physicalDevice, uint32_t typeFilter, MemoryPropertyFlags properties) -&gt; uint32_t</argsstring>
        <name>findMemoryType</name>
        <param>
          <type>PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>typeFilter</declname>
        </param>
        <param>
          <type>MemoryPropertyFlags</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>Helps finding the suitable memory type based on the function input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU that you want to find the correct memory type for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a bitmask containing one bit set for every memory type which the specified windows handle can be imported as. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory property flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the memory type matching the function input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="42" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1ae41dfbb084fe9a3d9757550ee6887333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Out</type>
          </param>
          <param>
            <type>typename In</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vk::Helper::unpack</definition>
        <argsstring>(const std::vector&lt; In &gt; &amp;data) -&gt; std::vector&lt; Out &gt;</argsstring>
        <name>unpack</name>
        <param>
          <type>const std::vector&lt; In &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A template function for unwrapping data structures with a unique handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of any data structure with a unique handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a vector of the given data type but without the unique handles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="48" column="10" bodyfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" bodystart="48" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a68b67b155588fe0e64efb0e26f864618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getPoolSizes</definition>
        <argsstring>(const std::vector&lt; DescriptorSetLayoutBinding &gt; &amp;layoutBindings, uint32_t maxSets) -&gt; std::vector&lt; DescriptorPoolSize &gt;</argsstring>
        <name>getPoolSizes</name>
        <param>
          <type>const std::vector&lt; DescriptorSetLayoutBinding &gt; &amp;</type>
          <declname>layoutBindings</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxSets</declname>
        </param>
        <briefdescription>
<para>Returns the descriptor pool sizes required by any given descriptor set layout bindings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layoutBindings</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of descriptor set layout bindings that will be used to create the descriptor pool sizes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSets</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of descriptor sets. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a vector of descriptor pool sizes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="62" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="62" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a6e1227990cef167f6d5b6b7b1f1b52b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vk::Helper::transitionImageLayout</definition>
        <argsstring>(Image image, ImageLayout oldLayout, ImageLayout newLayout)</argsstring>
        <name>transitionImageLayout</name>
        <param>
          <type>Image</type>
          <declname>image</declname>
        </param>
        <param>
          <type>ImageLayout</type>
          <declname>oldLayout</declname>
        </param>
        <param>
          <type>ImageLayout</type>
          <declname>newLayout</declname>
        </param>
        <briefdescription>
<para>Transitions the image layout of any given image. </para>
        </briefdescription>
        <detaileddescription>
<para>The function will generate its own command buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The vulkan image for which you want to change the image layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>The current image layout of the given vulkan image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>The target image layout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="68" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="68" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a9f3fa5a78b202fb543408c03e51a7340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vk::Helper::transitionImageLayout</definition>
        <argsstring>(Image image, ImageLayout oldLayout, ImageLayout newLayout, CommandBuffer commandBuffer)</argsstring>
        <name>transitionImageLayout</name>
        <param>
          <type>Image</type>
          <declname>image</declname>
        </param>
        <param>
          <type>ImageLayout</type>
          <declname>oldLayout</declname>
        </param>
        <param>
          <type>ImageLayout</type>
          <declname>newLayout</declname>
        </param>
        <param>
          <type>CommandBuffer</type>
          <declname>commandBuffer</declname>
        </param>
        <briefdescription>
<para>Transitions the image layout of any given image using an already existing command buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The vulkan image for which you want to change the image layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>The current image layout of the given vulkan image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>The target image layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commandBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The command buffer that will be used. It must be in the recording stage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="75" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="75" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a03b66bc6980679ba138631d754e85993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getImageMemoryBarrierInfo</definition>
        <argsstring>(Image image, ImageLayout oldLayout, ImageLayout newLayout, const ImageSubresourceRange *subresourceRange=nullptr) -&gt; std::tuple&lt; ImageMemoryBarrier, PipelineStageFlags, PipelineStageFlags &gt;</argsstring>
        <name>getImageMemoryBarrierInfo</name>
        <param>
          <type>Image</type>
          <declname>image</declname>
        </param>
        <param>
          <type>ImageLayout</type>
          <declname>oldLayout</declname>
        </param>
        <param>
          <type>ImageLayout</type>
          <declname>newLayout</declname>
        </param>
        <param>
          <type>const ImageSubresourceRange *</type>
          <declname>subresourceRange</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Simplifies the process of setting up an image memory barrier info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The vulkan image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>The current image layout of the given vulkan image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>The target image layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subresourceRange</parametername>
</parameternamelist>
<parameterdescription>
<para>The image view&apos;s subresource range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a tuple containing the actual image memory barrier as well as the source stage mask and the destination stage mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="83" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a679da5dcd94cae0130bf240f715bf64d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getAttachmentDescription</definition>
        <argsstring>(Format surfaceFormat) -&gt; AttachmentDescription</argsstring>
        <name>getAttachmentDescription</name>
        <param>
          <type>Format</type>
          <declname>surfaceFormat</declname>
        </param>
        <briefdescription>
<para>Simplifies the process of setting up an attachment description for a render pass. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surfaceFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The surface&apos;s format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the completed attachment description. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="88" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="88" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a97d6ba5a488dc2acbeded001c1e65942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::getDepthAttachmentDescription</definition>
        <argsstring>(Format depthFormat) -&gt; AttachmentDescription</argsstring>
        <name>getDepthAttachmentDescription</name>
        <param>
          <type>Format</type>
          <declname>depthFormat</declname>
        </param>
        <briefdescription>
<para>Simplifies the process of setting up a depth attachment description for a render pass. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>depthFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the completed depth attachment description. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="93" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1af8b7dcb2ec2dbf6188c9772fe6f8205e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::isPhysicalDeviceQueueComplete</definition>
        <argsstring>(PhysicalDevice physicalDevice) -&gt; bool</argsstring>
        <name>isPhysicalDeviceQueueComplete</name>
        <param>
          <type>PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <briefdescription>
<para>Checks if a given physical device supports the queue capabilities required by the application. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical device to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="97" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a579209d8855cc201ab98946961429f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::isPhysicalDeviceWithDedicatedTransferQueueFamily</definition>
        <argsstring>(PhysicalDevice physicalDevice) -&gt; bool</argsstring>
        <name>isPhysicalDeviceWithDedicatedTransferQueueFamily</name>
        <param>
          <type>PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <briefdescription>
<para>Checks if a given physical device has a dedicated transfer queue family index that is not a graphics queue family index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical device to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the physical device has a dedicated transfer queue family index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="102" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="102" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a3f1c6e5a77a150f0f0da60ca7e3d8b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::evaluatePhysicalDevice</definition>
        <argsstring>(PhysicalDevice physicalDevice) -&gt; std::pair&lt; unsigned int, std::string &gt;</argsstring>
        <name>evaluatePhysicalDevice</name>
        <param>
          <type>PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <briefdescription>
<para>Scores a given physical device (GPU). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical device to score. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pair consisting out of the determined score and the name of the physical device. </para>
</simplesect>
<simplesect kind="note"><para>RTX hardware surpasses any other GPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="108" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="108" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a9ac8571453eabef79b21edffff9c6e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vk::Helper::checkDeviceExtensionSupport</definition>
        <argsstring>(const std::vector&lt; const char * &gt; &amp;extensions)</argsstring>
        <name>checkDeviceExtensionSupport</name>
        <param>
          <type>const std::vector&lt; const char * &gt; &amp;</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
<para>Checks if all device extensions provided are supported. </para>
        </briefdescription>
        <detaileddescription>
<para>If any device extension is not supported the application will shut down immediately. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>All device extensions that should be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="114" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a6c8b9879ee23a500b88b4b8ce0da5ea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vk::Helper::checkInstanceLayersSupport</definition>
        <argsstring>(const std::vector&lt; const char * &gt; &amp;layers)</argsstring>
        <name>checkInstanceLayersSupport</name>
        <param>
          <type>const std::vector&lt; const char * &gt; &amp;</type>
          <declname>layers</declname>
        </param>
        <briefdescription>
<para>Checks if all layers provided are supported. </para>
        </briefdescription>
        <detaileddescription>
<para>If any layer is not supported the application will shut down immediately. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layers</parametername>
</parameternamelist>
<parameterdescription>
<para>All validation layers that should be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if initialization was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="121" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="121" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1acb8243a4819615e860ed10014e545f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vk::Helper::checkInstanceExtensionsSupport</definition>
        <argsstring>(const std::vector&lt; const char * &gt; &amp;extensions)</argsstring>
        <name>checkInstanceExtensionsSupport</name>
        <param>
          <type>const std::vector&lt; const char * &gt; &amp;</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
<para>Checks if all instance extensions provided are supported. </para>
        </briefdescription>
        <detaileddescription>
<para>If any instance extension is not supported the application will shut down immediately. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>All instance extensions that should be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if initialization was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="128" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="128" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacevk_1_1_helper_1a66ad6f9e410f31bdea43c49b3a774611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto vk::Helper::findSupportedImageFormat</definition>
        <argsstring>(vk::PhysicalDevice physicalDevice, const std::vector&lt; vk::Format &gt; &amp;formatsToTest, vk::FormatFeatureFlagBits features, vk::ImageTiling tiling) -&gt; vk::Format</argsstring>
        <name>findSupportedImageFormat</name>
        <param>
          <type>vk::PhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <param>
          <type>const std::vector&lt; vk::Format &gt; &amp;</type>
          <declname>formatsToTest</declname>
        </param>
        <param>
          <type>vk::FormatFeatureFlagBits</type>
          <declname>features</declname>
        </param>
        <param>
          <type>vk::ImageTiling</type>
          <declname>tiling</declname>
        </param>
        <briefdescription>
<para>Retrieves a supported image format for a given physical device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical device to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>formatsToTest</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of formats that will be checked for their support. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>features</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vulkan format features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vulkan image tiling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="135" column="10" declfile="C:/Repos/rayex/include/api/utility/Helpers.hpp" declline="135" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of helper functions for various purposes such as simplifying the process of filling Vulkan structs and objects with their respective parameters. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Repos/rayex/include/api/utility/Helpers.hpp" line="10" column="3"/>
  </compounddef>
</doxygen>
