#version 460
//#extension GL_EXT_ray_tracing : require
#extension GL_NV_ray_tracing : require

struct hitPayload
{
  vec3 hitValue;
};

//layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

//layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 0) rayPayloadNV hitPayload prd;

layout(binding = 2, set = 0) uniform UniformBufferObject
{
  mat4 model;
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
  vec3 cameraPos;
} ubo;

void main()
{
  //const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
  //const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 origin    = ubo.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = ubo.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0);

  //uint  rayFlags = gl_RayFlagsOpaqueEXT;
  uint  rayFlags = gl_RayFlagsOpaqueNV;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  //traceRayEXT(topLevelAS,     // acceleration structure
  traceNV(topLevelAS,     // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          origin.xyz,     // ray origin
          tMin,           // ray min range
          direction.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
  );

  //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.0));
  imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(prd.hitValue, 1.0));
}
